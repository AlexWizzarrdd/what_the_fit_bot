import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)

from handlers.pick_by_style import pick_style_entry, style_select, style_detail
from handlers.find_by_photo import find_by_photo_entry, handle_photo
from handlers.general_recommend import (
    general_recommend_entry,
    handle_gender_selection,
    handle_general_recommend,  # ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
)

from states import (
    FIND_PHOTO,
    STYLE_SELECT,
    STYLE_DETAIL,
    MENU_CHOICE,
    GENERAL_RECOMMEND,
    GENDER_SELECT,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("ACCESS_TOKEN")
if not TOKEN:
    raise ValueError("ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logo_path = os.path.join("media", "logo.png")
    if os.path.exists(logo_path):
        with open(logo_path, "rb") as photo:
            await update.message.reply_photo(photo)

    await update.message.reply_text(
        """üëã *–ü—Ä–∏–≤–µ—Ç!*

–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç–∏–ª—å–Ω–æ –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ:

üîé –ó–∞–≥—Ä—É–∑–∏—à—å —Ñ–æ—Ç–æ ‚Äî –∏ —è –Ω–∞–π–¥—É –ø–æ—Ö–æ–∂–∏–µ –≤–µ—â–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö  
üß• –ü–æ–¥–±–µ—Ä—É –æ–±—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ  
üé® –î–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø—É, —á—Ç–æ–±—ã –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —Ç–≤–æ—é –∫—Ä–∞—Å–æ—Ç—É

*–ù–∞—á–Ω—ë–º?* ‚ú®""",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([["üöÄ –ü–æ–µ—Ö–∞–ª–∏"]], resize_keyboard=True),
    )
    return MENU_CHOICE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –≤—Å–µ—Ö –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥
async def main_menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text in ["üöÄ –ü–æ–µ—Ö–∞–ª–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]:
        keyboard = [
            ["–ù–∞–π—Ç–∏ –ø–æ —Ñ–æ—Ç–æ"],
            ["üîí –ü–æ–¥–±–æ—Ä –ø–æ —Å—Ç–∏–ª—é"],
            ["–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
        ]
        await update.message.reply_text(
            "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )
        return MENU_CHOICE

    elif text in ["–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë", "–ù–∞–π—Ç–∏ –ø–æ —Ñ–æ—Ç–æ"]:
        return await find_by_photo_entry(update, context)

    elif text == "üîí –ü–æ–¥–±–æ—Ä –ø–æ —Å—Ç–∏–ª—é":
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return MENU_CHOICE

    elif text == "–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
        return await general_recommend_entry(update, context)  # ‚Üê –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤

    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")
        return MENU_CHOICE


# MAIN
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU_CHOICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_router),
            ],
            FIND_PHOTO: [
                MessageHandler(filters.PHOTO, handle_photo),
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_router),
            ],
            STYLE_SELECT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, style_select),
            ],
            STYLE_DETAIL: [],
            GENDER_SELECT: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, handle_gender_selection
                ),
            ],
            GENERAL_RECOMMEND: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, handle_general_recommend
                ),
            ],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == "__main__":
    main()
