import sys
import os
import tempfile

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

max_products_to_send = 2

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from states import FIND_PHOTO
from utils.navigation import return_to_main_menu

from core.task_pool.pool import pool

async def find_by_photo_entry(
    update: Update,
    _: ContextTypes.DEFAULT_TYPE
):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ")
    return FIND_PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    if update.message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        return await return_to_main_menu(update, context)

    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Ñ–æ—Ç–æ ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")
        return FIND_PHOTO

    await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")

    temp_file_path = os.path.join(
        tempfile.gettempdir(),
        f"{update.message.photo[-1].file_id}.jpg"
    )
    file_handler = await context.bot.get_file(update.message.photo[-1].file_id)
    _ = await file_handler.download_to_drive(custom_path=temp_file_path)

    information = pool.handle(temp_file_path)
    if information == None:
        await update.message.reply_text(
            "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode="Markdown",
        )
        return FIND_PHOTO
    
    to_send = min(len(information), max_products_to_send)
    if to_send == 0:
        await update.message.reply_text(
            "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ–¥–µ–∂–¥—É –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            parse_mode="Markdown",
        )
        return FIND_PHOTO
    
    keys = list(information.keys())

    for i in range(to_send):
        card = information[keys[i]]

        if (card == None or
            card["_Product__name"] == None or
            card["_Product__review_rating"] == None or
            card["_Product__price"] == None or
            card["_Product__link"] == None or
            card["_Product__image_path"] == None):

            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                parse_mode="Markdown",
            )

            return FIND_PHOTO
        
        try:
            photo = open(card["_Product__image_path"], 'rb')
        except:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                parse_mode="Markdown",
            )
            return FIND_PHOTO

        await update.message.reply_photo(
            photo=photo,
            caption=f"\
üëï {card["_Product__name"]}\n\
‚≠ê –û—Ü–µ–Ω–∫–∞: {card["_Product__review_rating"]} / 5\n\
üí∞ –¶–µ–Ω–∞: {card["_Product__price"]} ‚ÇΩ\n\
üîó [–°—Å—ã–ª–∫–∞]({card["_Product__link"]})\
",
            parse_mode="Markdown",
            reply_markup= ReplyKeyboardMarkup(
                [["–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë"], ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]],
                resize_keyboard=True,
            )
        )

    return FIND_PHOTO
